env:
  global:
    - COMMIT_AUTHOR_EMAIL: orex@travis-ci.org
    - TEST_PROGRAM_CMD="-d -i ../data/examples/Ca2Al2SiO7/Ca2Al2SiO7.cif | grep -q "The total number of combinations is 6"

group: travis_latest

os: linux
dist: xenial
language: cpp
cache: ccache

jobs:
 include:
   - name: "Developing build."
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          OB_241_STABLE=FALSE
          DEPLOY_BUILD=FALSE

   - name: "Developing build against stable OpenBabel version."
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          OB_241_STABLE=TRUE
          DEPLOY_BUILD=FALSE

   - name: "Developing build for old trusty platform."
     dist: trusty
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          OB_241_STABLE=FALSE
          DEPLOY_BUILD=FALSE

   - name: "Developing build without LibArchive support."
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          OB_241_STABLE=FALSE
          DEPLOY_BUILD=FALSE
          SUPERCELL_CMAKE_OPTIONS="-DCMAKE_DISABLE_FIND_PACKAGE_LibArchive=TRUE"

   - name: "Developing build with clang."
     compiler: clang
     dist: trusty #xenial build fails with clang
     cache: false
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          OB_241_STABLE=FALSE
          DEPLOY_BUILD=FALSE

   - name: "Deploy build Linux."
     compiler: gcc
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          LIBARCHIVE_OFF=FALSE
          DEPLOY_BUILD="linux"
          OB_241_STABLE=FALSE
          OB_CMAKE_OPTIONS="-DMINIMAL_BUILD=OFF -DBUILD_GUI=OFF -DBUILD_SHARED=OFF -DWITH_INCHI=OFF -DENABLE_VERSIONED_FORMATS=OFF -DENABLE_TESTS=OFF -DGLIBC_24_COMPATIBLE=ON"
          SUPERCELL_CMAKE_OPTIONS="-DLINK_STATIC_LIBS=ON -DGLIBC_24_COMPATIBLE=ON"

   - name: "Deploy build MacOS."
     os: osx
     osx_image: xcode11
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD="osx"
          OB_241_STABLE=TRUE
          OB_CMAKE_OPTIONS="-DMINIMAL_BUILD=OFF -DBUILD_GUI=OFF -DBUILD_SHARED=OFF -DWITH_INCHI=OFF -DENABLE_VERSIONED_FORMATS=OFF -DENABLE_TESTS=OFF"
          SUPERCELL_CMAKE_OPTIONS="-DLINK_STATIC_LIBS=ON"

   - name: "Deploy build Windows crosscompile."
     cache:
       timeout: 2000
       directories:
         - $HOME/.cache_mxe
         
     env: MXE_URL="https://github.com/mxe/mxe.git"
          CROSS_TARGET='x86_64-w64-mingw32.static'
          CMAKE_COMMAND="${CROSS_TARGET}-cmake"
          BUILD_TYPE=CROSS
          DEPLOY_BUILD="windows"
          OB_241_STABLE=TRUE
          OB_CMAKE_OPTIONS="-DMINIMAL_BUILD=OFF -DBUILD_GUI=OFF -DBUILD_SHARED=OFF -DWITH_INCHI=OFF -DENABLE_VERSIONED_FORMATS=OFF -DENABLE_TESTS=OFF"
          SUPERCELL_CMAKE_OPTIONS="-DLINK_STATIC_LIBS=ON -DCMAKE_DISABLE_FIND_PACKAGE_LibArchive=TRUE"
     addons:
       apt:
         update: true
         packages:
           - wine
           - autopoint
           - gperf
           - intltool
           - libtool
           - libtool-bin
           - lzip
           - p7zip-full
           
   - name: "Deploy build documentation."
     env: BUILD_TYPE=DOC
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD="doc"
     cache: false
     addons:
       apt:
         update: true
         packages:
         - lmodern
         - texlive-extra-utils
         - python
         - texlive-extra-utils
         - texlive-latex-extra
         - python-pygments
         - texlive-science
         - texlive-humanities
         - texlive-pstricks
         - texlive-fonts-recommended


addons:
  apt:
    update: true
    packages:
    - libboost-program-options-dev
    - libboost-regex-dev
    - libboost-filesystem-dev
    - libboost-random-dev
    - libboost-system-dev
    - libeigen3-dev
    - libarchive-dev
    - liblzma-dev
    - libbz2-dev
    - zlib1g-dev
    - zip

  homebrew:
    update: false
    packages:
    - boost
    - eigen
    - libarchive
    - zlib
    - libxml2


before_install:
 - export c_path=${PWD}

install:
 - export START_TIME=`date +%s`
 - mkdir -p tmp && cd tmp
 - |
   if [[ ${BUILD_TYPE} == CROSS ]]; then
     pushd .
     git clone ${MXE_URL} && cd mxe
     ln -s $HOME/.cache_mxe .ccache
     while(true); do sleep 9m; echo "watchdog signal"; done &
     WATCHDOG_PID=$!
     make MXE_TARGETS=${CROSS_TARGET} boost eigen -j2
     kill $WATCHDOG_PID
     export PATH=${PWD}/usr/bin:$PATH
     popd
   fi
 - |
   if [[ ${BUILD_TYPE} == PROGRAM ]] || [[ ${BUILD_TYPE} == CROSS ]]; then
      git clone https://github.com/openbabel/openbabel.git && cd openbabel
      if [[ ${OB_241_STABLE} == TRUE ]]; then git pull && git checkout openbabel-2-4-x; fi
      mkdir build
   fi
 - |
   if [[ ${BUILD_TYPE} == CROSS ]]; then
      echo "PATCH OPENBABEL"
      sed -ir 's/#define isfinite _finite//g' src/config.h.cmake
   fi
 - |
   if [[ ${BUILD_TYPE} == DOC ]]; then
      echo "Doc prepare."
   fi
 - cd ${c_path}

script:
 - export FINISH_TIME=`date +%s`
 - |
   if ((FINISH_TIME-START_TIME < 1800)); then
     if [[ ${BUILD_TYPE} == PROGRAM ]] || [[ ${BUILD_TYPE} == CROSS ]]; then
        cd tmp/openbabel/build
        if [[ ${TRAVIS_OS_NAME} == osx ]]; then
          export PKG_CONFIG_PATH="/usr/local/opt/libxml2/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig"
          export ZLIB_ROOT_DIR="/usr/local/opt/zlib/"
        fi
        ${CMAKE_COMMAND} ../ -DCMAKE_BUILD_TYPE=Release `echo ${OB_CMAKE_OPTIONS}`
        make -j 2
        if [[ ${BUILD_TYPE} == PROGRAM ]]; then 
          sudo make install
        else 
          OBDIR="-DOpenBabel2_DIR=${c_path}/tmp/openbabel/build"
          export BABEL_LIBDIR="${c_path}/tmp/openbabel/build/lib"
          export BABEL_DATADIR="${c_path}/tmp/openbabel/data"
        fi
        mkdir ${c_path}/build && cd ${c_path}/build
        ${CMAKE_COMMAND} ../ -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=Release ${OBDIR} -DBUILD_DOC=OFF `echo ${SUPERCELL_CMAKE_OPTIONS}`
        make -j 2 supercell
     fi
   else
     echo "Too much time spended. Trying to save cache."
     false
   fi
 - |
   if [[ ${BUILD_TYPE} == DOC ]]; then
      mkdir ${c_path}/build && cd ${c_path}/build
      ${CMAKE_COMMAND} ../ -DBUILD_PROGRAM=OFF -DBUILD_DOC=ON
      make -j 2
   fi
 - cd ${c_path}/build
 - if [[ ${BUILD_TYPE} == PROGRAM ]]; then ./src/sc_cli/supercell `echo ${TEST_PROGRAM_CMD}`; fi
 - if [[ ${BUILD_TYPE} == CROSS ]]; then wine ./src/sc_cli/supercell.exe `echo ${TEST_PROGRAM_CMD}`; fi
 - |
   if [[ ${BUILD_TYPE} == DOC ]]; then
      ls doc/man/supercell_man.{html,pdf} doc/man/supercell.1 doc/tutorial/supercell_tutorial.pdf
   fi

before_deploy:
  - wget https://github.com/orex/supercell/raw/deploy/deploy.sh -O ${c_path}/deploy.sh && chmod +x ${c_path}/deploy.sh

deploy:
  provider: script
  script: ${c_path}/deploy.sh
  skip_cleanup: true
  on:
    all_branches: true
    condition: ${DEPLOY_BUILD} != FALSE && ${DEPLOY_BUILD} != ""
